main.usage=\
Usage: jdeprscan [options] '{dir|jar|class}' ...\n\
\n\
options:\n\
\  -cp  --class-path PATH\n\
\       --for-removal\n\
\       --full-version\n\
\  -h   --help\n\
\  -l   --list\n\
\       --release 6|7|8|9\n\
\  -v   --verbose\n\
\       --version

main.help=\
Scans each argument for usages of deprecated APIs. An argument\n\
may be a directory specifying the root of a package hierarchy,\n\
a JAR file, or a class name. The class name must be specified\n\
using a fully qualified class name using the $ separator character\n\
for nested classes, for example,\n\
\n\
\    java.lang.Thread$State\n\
\n\
The --class-path (-cp) option provides a search path for resolution\n\
of dependent classes.\n\
\n\
The --for-removal option limits scanning or listing to APIs that are\n\
deprecated for removal. Cannot be used with a release value of 6, 7, or 8.\n\
\n\
The --full-version option prints out the full version string of the tool.\n\
\n\
The --help option prints out a full help message.\n\
\n\
The --list (-l) option prints out the set of deprecated APIs. No scanning is done,\n\
so no directory, jar, or class arguments should be provided.\n\
\n\
The --release option specifies the Java SE release that provides the set\n\
of deprecated APIs for scanning.\n\
\n\
The --verbose (-v) option enables additional message output during processing.\n\
\n\
The --version option prints out the abbreviated version string of the tool.

main.xhelp=\
Unsupported options:\n\
\n\
\  --Xload-class CLASS\n\
\      Loads deprecation information from the named class.\n\
\  --Xload-csv CSVFILE\n\
\      Loads deprecation information from the named CSV file.\n\
\  --Xload-dir DIR\n\
\      Loads deprecation information from the class hierarchy\n\
\      at the named directory.\n\
\  --Xload-jar JARFILE\n\
\      Loads deprecation information from the named JAR file.\n\
\  --Xload-jdk9 JAVA_HOME\n\
\      Loads deprecation information from the JDK located at\n\
\      JAVA_HOME, which must be a modular JDK.\n\
\  --Xload-old-jdk JAVA_HOME\n\
\      Loads deprecation information from the JDK located at\n\
\      JAVA_HOME, which must not be a modular JDK. Instead, the\n\
\      named JDK must be a "classic" JDK with an rt.jar file.\n\
\  --Xload-self\n\
\      Loads deprecation information by traversing the jrt:\n\
\      filesystem of the running JDK image.\n\
\  --Xcompiler-arg ARG\n\
\      Adds ARG to the list of compiler arguments.\n\
\  --Xcsv-comment COMMENT\n\
\      Adds COMMENT as a comment line to the output CSV file.\n\
\      Only effective if -Xprint-csv is also supplied.\n\
\  --Xhelp\n\
\      Prints this message.\n\
\  --Xprint-csv\n\
\      Prints a CSV file containing the loaded deprecation information\n\
\      instead of scanning any classes or JAR files.

error.prefix=Error:

scan.process.class=Processing class {0}...

scan.dep.normal=deprecated
scan.dep.removal=deprecated FOR REMOVAL

scan.out.extends={0} {1} extends class {2} {3}
scan.out.implements={0} {1} implements interface {2} {3}
scan.out.usestype={0} {1} uses type {2} {3}
scan.out.usesmethodintype={0} {1} uses method in type {2} {3}
scan.out.usesmethod={0} {1} uses method {2} {3} {4} {5}
scan.out.usesintfmethodintype={0} {1} uses interface method in type {2} {3}
scan.out.usesintfmethod={0} {1} uses interface method {2} {3} {4} {5}
scan.out.usesfieldintype={0} {1} uses field in type {2} {3}
scan.out.usesfield={0} {1} uses field {2} {3} {4}
scan.out.usesfieldoftype={0} {1} uses field of type {2} {3} {4} {5}
scan.out.hasfield={0} {1} has field {2} of type {3} {4}
scan.out.methodparmtype={0} {1} method {2} has parameter type {3} {4}
scan.out.methodrettype={0} {1} method {2} has return type {3} {4}
scan.out.methodoverride={0} {1} overrides method {2} {3} {4} {5}
